@page "/form/polizas"
@using MudBlazor
@using FluentValidation
@using Aplicacion.UseCases.Polizas

@inject AgregarPolizaUseCase AgregarPoliza
@inject ModificarPolizaUseCase ModificarPoliza


<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-2">
    <MudCard>
        <MudForm Model="@_poliza" @ref="@_form" Validation="@(_polizasValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                <MudNumericField
                    Label="Vehiculo Asegurado"
                    Variant="Variant.Text" Min="0"
                    @bind-Value="_poliza.VehiculoAseguradoId"
                    For="@(() => _poliza.VehiculoAseguradoId)"/>
                
                <MudSelect T="string" Label="Tipo Cobertura" AnchorOrigin="Origin.BottomCenter"
                       @bind-Value="_poliza.TipoCobertura"
                       For="@(() => _poliza.TipoCobertura)">
                    <MudSelectItem Value="@("Responsabilidad Civil")" />
                    <MudSelectItem Value="@("Franquicia")" />
                </MudSelect>
                
                <MudNumericField
                    Label="Valor Asegurado"
                    Variant="Variant.Text" Min="0"
                    @bind-Value="_poliza.ValorAsegurado"
                    For="@(() => _poliza.ValorAsegurado)"/>

                <MudNumericField
                    Label="Valor Franquicia"
                    Variant="Variant.Text" Min="0"
                    @bind-Value="_poliza.Franquicia"
                    For="@(() => _poliza.Franquicia)"/>

                <MudDatePicker Label="Inicio Vigencia" @bind-Date="@_poliza.InicioVigencia"/>
                <MudDatePicker Label="Fin Vigencia" @bind-Date="@_poliza.FinVigencia"/>

            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>_form.Validate())">Validar</MudButton>

                <MudButton
                    OnClick="@(() => Submit())"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-4">Agregar!</MudButton>

            </MudCardActions>
        </MudForm>
    </MudCard>

</MudContainer>
@code {
    [Inject] ISnackbar Snackbar { get; set; }
    Poliza _poliza = new Poliza();
    MudForm _form;
    
	PolizasFluentValidator _polizasValidator = new PolizasFluentValidator();

    

    private void Submit()
    {
        _form.Validate();

        if (_form.IsValid)
        {
            Snackbar?.Add("Agregado!");
            AgregarPoliza.Ejecutar(_poliza);
        }
    }
    
    public class PolizasFluentValidator : AbstractValidator<Poliza>
    {
        public PolizasFluentValidator()
        {
            RuleFor(x => x.VehiculoAseguradoId)
                .NotEmpty()
                .GreaterThan(0);

            RuleFor(x => x.TipoCobertura)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .Length(1, 20);

            RuleFor(x => x.ValorAsegurado)
                .NotEmpty()
                .GreaterThan(0);

            RuleFor(x => x.Franquicia)
                .NotEmpty()
                .GreaterThan(0);

            RuleFor(x => x.InicioVigencia)
                .NotEmpty();

            RuleFor(x => x.FinVigencia)
                .NotEmpty();

        }
        

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Poliza>.CreateWithOptions((Poliza)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    
    }



}