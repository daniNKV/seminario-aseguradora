@using MudBlazor
@using Aplicacion.UseCases.Polizas
@using Aplicacion.UseCases.Titulares
@inject NavigationManager Navegador
@inject ListarTitularesConSusVehiculosUseCase ListarTitularesConSusVehiculos
@inject EliminarTitularUseCase EliminarTitular
@inject ObtenerPolizaDeVehiculoUseCase ObtenerPolizaDeVehiculo
@inject IDialogService DialogService

@page "/lista/titulares/{Id:int?}"

<MudContainer Fixed="true">
    <MudDataGrid Items="@_titulares" xs="12" sm="7" QuickFilter="@QuickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Titulares</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
            
        <Columns>
            <PropertyColumn Property="p => p.Id" Title="ID"/>
            <PropertyColumn Property="p => p.Nombre"/>
            <PropertyColumn Property="x => x.Apellido"/>
            <PropertyColumn Property="x => x.Direccion" Sortable="false"/>
            <PropertyColumn Property="x => x.Dni" Title="DNI" Sortable="false"/>
            <PropertyColumn Property="x => x.Telefono" Sortable="false"/>
            <PropertyColumn Property="x => x.Email" Title="Email" Sortable="false"/>
            <HierarchyColumn T="Titular" ButtonDisabledFunc="@(x => !x.ItemsAsegurados?.Any() ?? false)"/>

            <TemplateColumn CellClass="d-flex justify-start" Title="Acciones">
                <CellTemplate>
                    <MudStack Row Class="-my-4">
                        <MudButton OnClick="@( () => ModificarTitular(@context.Item))" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary">Editar</MudButton>
                        <MudButton OnClick="@( () => ConfirmarEliminacion(@context.Item))" Size="Size.Small" Variant="Variant.Filled" Color="Color.Error">Eliminar</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudContainer Fixed="true">
                <MudDataGrid Items="@context.Item.ItemsAsegurados" xs="12" sm="7">
                    <Columns>
                        <PropertyColumn Property="v => v.Id" Title="ID"/>
                        <PropertyColumn Property="v => v.Marca"/>
                        <PropertyColumn Property="v => v.Fabricacion"/>
                        <PropertyColumn Property="v => v.Dominio"/>
                        <TemplateColumn CellClass="d-flex justify-start" Title="Poliza">
                            <CellTemplate Context="vehiculos">
                                <MudButton OnClick="@(() => VerPoliza(vehiculos.Item))" Variant="Variant.Outlined" Color="Color.Primary">Ver Poliza</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudContainer>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Titular" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code { 
    [Parameter] public int? Id { get; set; }
    private IEnumerable<Titular>? _titulares = new List<Titular>();
    private List<string> _events = new();
    private string? _searchString;
    private const bool SortNameByLength = true;
    Titular? _titularAEliminar;
    
    protected override void OnParametersSet()
    {
        if (Id == null) return;
        _searchString = Id.ToString();
    }
    protected override void OnInitialized()
    {
        _titulares = ListarTitularesConSusVehiculos.Ejecutar();
    }

    private void VerPoliza(Vehiculo vehiculo)
    {
        var poliza = ObtenerPolizaDeVehiculo.Ejecutar(vehiculo);
        if (poliza != null) Navegador.NavigateTo($"lista/polizas/{poliza.Id}");
    }
    
    void ModificarTitular(Titular cli)
    {
        Navegador.NavigateTo($"form/titulares/{cli.Id}");
    }

    async Task ConfirmarEliminacion(Titular cli)
    {
        _titularAEliminar = cli;
        var parametros = new DialogParameters
        {
            { "ContentText", $"Realmente quieres eliminar el titular {cli.Id}?" },
            { "ButtonText", "Eliminar" },
            { "Color", Color.Error },
        };
        
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true, 
            MaxWidth = MaxWidth.ExtraSmall,
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Eliminar", parametros, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Eliminar();
        }
    }
    
    private void Eliminar()
    {
        if (_titularAEliminar != null)
        {
            EliminarTitular.Ejecutar(_titularAEliminar.Id);
            _titulares = ListarTitularesConSusVehiculos.Ejecutar(); //se actualiza la lista de clientes
        }
    }
    private Func<Titular, object> SortBy => x =>
    {
        if (SortNameByLength)
            return x.Nombre.Length;
        else
            return x.Nombre;
    };
    
    private Func<Titular, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Nombre.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Apellido.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Direccion} {x.Email} {x.Id}".Contains(_searchString))
            return true;

        return false;
    };


}