@using MudBlazor
@using Aplicacion.UseCases.Terceros
@inject ListarTercerosUseCase ListarTerceros
@inject EliminarTerceroUseCase EliminarTercero
@inject NavigationManager Navegador
@inject IDialogService DialogService

@page "/lista/terceros/{Id:int?}"

<MudContainer Fixed="true">
    <MudDataGrid Items="@_terceros" xs="12" sm="7" QuickFilter="@QuickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Terceros</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
            
        <Columns>
            <HierarchyColumn T="Tercero" ButtonDisabledFunc="@(t => t.Siniestro == null)"/>
            <PropertyColumn Property="p => p.Id" Title="ID"/>
            <PropertyColumn Property="p => p.Nombre"/>
            <PropertyColumn Property="x => x.Dni" Title="DNI"/>
            <PropertyColumn Property="x => x.Aseguradora"/>
            <PropertyColumn Property="x => x.SiniestroId" Title="Siniestro ID"/>

            <TemplateColumn CellClass="d-flex justify-start" Title="Acciones">
                <CellTemplate>
                    <MudStack Row Class="-my-4">
                        <MudButton 
                            OnClick="@( () => Modificar(@context.Item))" 
                            Size="Size.Small" Variant="Variant.Filled" 
                            Color="Color.Primary">Editar</MudButton>
                        <MudButton 
                            OnClick="@( () => ConfirmarEliminacion(@context.Item))" 
                            Size="Size.Small" Variant="Variant.Filled" 
                            Color="Color.Error">Eliminar</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        
        <ChildRowContent>
            <MudContainer Fixed="true">
                <MudSimpleTable Style="overflow-x: auto;">
                    <thead>
                        <th>ID</th>
                        <th>Fecha Ingreso</th>
                        <th>Fecha Suceso</th>
                        <th>Direccion</th>
                        <th>Acci√≥n</th>
                    </thead>
                    <tbody>
                        <tr>
                            <td>@context.Item.Siniestro?.Id</td>
                            <td>@context.Item.Siniestro?.FechaIngreso</td>
                            <td>@context.Item.Siniestro?.FechaSuceso</td>
                            <td>@context.Item.Siniestro?.Direccion</td>
                            <td>
                                <MudButton 
                                    OnClick="@(() => VerSiniestro(@context.Item))" 
                                    Size="Size.Small" Variant="Variant.Outlined" 
                                    Color="Color.Primary">Ver Siniestro</MudButton>
                            </td>
                        </tr>
                    </tbody>
                </MudSimpleTable>
            </MudContainer>
        </ChildRowContent>

        <PagerContent>
            <MudDataGridPager T="Tercero"/>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code { 
    [Parameter] public int? Id { get; set; }

    private IEnumerable<Tercero>? _terceros = new List<Tercero>();
    private string? _searchString;
    //DialogoConfirmacion dialogo = null!;
    Tercero? _terceroAEliminar = null;
    
    protected override void OnParametersSet()
    {
        if (Id == null) return;
        _searchString = Id.ToString();
    }
    
    protected override void OnInitialized()
    {
        _terceros = ListarTerceros.Ejecutar();
    }
    
    private void VerSiniestro(Tercero tercero)
    {
        Navegador.NavigateTo($"lista/siniestros/{tercero.SiniestroId}");
    }
    
    void Modificar(Tercero cli)
    {
        Navegador.NavigateTo($"form/terceros/{cli.Id}");
    }

    async Task ConfirmarEliminacion(Tercero cli)
    {
        _terceroAEliminar = cli;
        var parametros = new DialogParameters
        {
            { "ContentText", $"Realmente quieres eliminar al tercero {cli.Id} involucardo en el siniestro {cli.SiniestroId}?" },
            { "ButtonText", "Eliminar" },
            { "Color", Color.Error },
        };
        
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true, 
            MaxWidth = MaxWidth.ExtraSmall,
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Eliminar", parametros, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Eliminar();
        }
    }
    
    private void Eliminar()
    {
        if (_terceroAEliminar != null)
        {
            EliminarTercero.Ejecutar(_terceroAEliminar.Id);
            _terceros = ListarTerceros.Ejecutar(); 
            StateHasChanged();

        }
    }


    private Func<Tercero, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Nombre.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Apellido.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id}".Contains(_searchString))
            return true;

        return false;
    };


}