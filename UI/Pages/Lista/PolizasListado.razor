@using MudBlazor
@using Aplicacion.UseCases.Polizas
@inject ListarPolizasUseCase ListarPolizas
@inject ModificarPolizaUseCase ModificarPoliza
@inject EliminarPolizaUseCase EliminarPoliza
@page "/lista/polizas/{Id:int?}"


<MudContainer Fixed="true">
    <MudDataGrid Items="@_polizas" xs="12" sm="7" QuickFilter="@QuickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Polizas</MudText>
            <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
            
        <Columns>
            <PropertyColumn Property="p => p.Id" Title="ID"/>
            <PropertyColumn Property="p => p.TipoCobertura" Title="Cobertura"/>
            <PropertyColumn Property="x => x.Franquicia"/>
            <PropertyColumn Property="x => x.ValorAsegurado" Title="Valor Asegurado"/>
            <PropertyColumn Property="x => x.InicioVigencia" Title="Inicio Vigencia"/>
            <PropertyColumn Property="x => x.FinVigencia" Title="Fin Vigencia"/>
            <HierarchyColumn T="Poliza" ButtonDisabledFunc="@(p => p.VehiculoAsegurado == null)"/>

            <TemplateColumn CellClass="d-flex justify-start" Title="Acciones">
                <CellTemplate>
                    <MudStack Row Class="-my-4">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="add to favorite"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudContainer Fixed="true">
                <MudSimpleTable Style="overflow-x: auto;">
                    <thead>
                        <th>ID</th>
                        <th>Dominio</th>
                        <th>Marca</th>
                        <th>Fabricacion</th>
                        <th>Titular ID</th>
                        <th>Accion</th>
                    </thead>
                    <tbody>
                        <tr>
                            <td>@context.Item.VehiculoAsegurado?.Id</td>
                            <td>@context.Item.VehiculoAsegurado?.Dominio</td>
                            <td>@context.Item.VehiculoAsegurado?.Marca</td>
                            <td>@context.Item.VehiculoAsegurado?.Fabricacion</td>
                            <td>@context.Item.VehiculoAsegurado?.TitularId</td>
                            <td>                                                
                                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary">Ver Vehiculo</MudButton>
                            </td>
                        </tr>
                    </tbody>
                </MudSimpleTable>
            </MudContainer>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Poliza" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code { 
    [Parameter] public int? Id { get; set; }

    private IEnumerable<Poliza>? _polizas = new List<Poliza>();
    private string? _searchString;
    private const bool SortNameByLength = true;
    //DialogoConfirmacion dialogo = null!;
    Poliza? _polizaAEliminar = null;
    
    protected override void OnInitialized()
    {
        _polizas = ListarPolizas.Ejecutar();
    }
    
    protected override void OnParametersSet()
    {
        if (Id == null) return;
        _searchString = Id.ToString();
    }
    
/*
    private void ConfirmarEliminacion(Cliente cli)
    {
        _clienteParaEliminar = cli;
        dialogo.Mensaje = $"Â¿Desea eliminar al cliente {cli.Nombre} {cli.Apellido}?";
        dialogo.Mostrar();
    }
    private void Eliminar()
    {
        if (_clienteParaEliminar != null)
        {
            EliminarClienteUseCase.Ejecutar(_clienteParaEliminar.Id);
            _lista = ListarClientesUseCase.Ejecutar(); //se actualiza la lista de clientes
        }
    }

    
    private Func<Poliza, object> SortBy => x =>
    {
        if (_sortNameByLength)
            return x.Nombre.Length;
        else
            return x.Nombre;
    };
    */
    private Func<Poliza, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{x.Id}".Contains(_searchString))
            return true;

        return false;
    };
}